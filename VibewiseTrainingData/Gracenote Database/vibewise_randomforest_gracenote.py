# -*- coding: utf-8 -*-
"""vibewise_randomforest_gracenote.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hiKVu2Mbo1nXo-3gLOO6YSqtjumRxy2C

# Random Forest Classification

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd
import pickle

"""## Importing the dataset"""

dataset = pd.read_csv('data_imputed_binned.csv')
X = dataset.iloc[:,2:-1].values
y = dataset.iloc[:,-1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X)

"""# Encoding"""

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y_enc = encoder.fit_transform(y_train)
y_test = encoder.transform(y_test)

"""## Training the Logistic Regression model on the Training set"""

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier()
classifier.fit(X_train, y_enc)
filename = 'model_export.sav'
pickle.dump(classifier, open(filename, 'wb'))

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)
results = encoder.inverse_transform(y_pred)
test_vals = encoder.inverse_transform(y_test)
print(np.concatenate((y_pred.reshape(len(results),1), test_vals.reshape(len(test_vals),1)),1))
num = 0
'''for pred, act in zip(results, test_vals):
  if(pred == act):
    num = num + 1
#print(num / len(results) * 100)'''

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""## Visualising the Training set results"""



"""## Visualising the Test set results"""